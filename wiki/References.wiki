#summary Useful links

=Development=

  * [http://www.germane-software.com/~ser/R_n_R/subversion.html#N61 Subversion manual]
  * [http://www.sonatype.com/books/mvnex-book/reference/public-book.html Maven book]
  * [http://www.cs.swarthmore.edu/~newhall/unixhelp/debuggingtips_Java.html Compiling and running Java programs]
  * [http://download.oracle.com/javase/tutorial/deployment/jar/index.html Packaging programs in JAR files]
  * [http://java.sun.com/docs/codeconv Sun code conventions]
  * [http://semver.org/ Semantic versioning]
  * [http://stackoverflow.com Stackoverflow] Software development Q & A site
  * [http://alexdp.free.fr/violetumleditor/page.php Violet UML editor]
  * [http://www.docjar.com/ DocJar] for viewing library javadoc and source

=Design=

==Patterns==
Design patterns originated as an architectural concept by Christopher Alexander (1977/79). In software design the most common ones are the 23 [http://en.wikipedia.org/wiki/Design_Patterns_(book)#Creational_patterns 'Gang of Four' (GoF) patterns], which are divided into creational, structural and behavioral patterns. See also this
[http://stackoverflow.com/questions/3253015/is-the-adapter-pattern-usable-in-cases-where-the-different-interface-methods-have article on StackOverflow])

Examples:
  * [http://en.wikipedia.org/wiki/Abstract_factory_pattern Abstract factory]
  * [http://en.wikipedia.org/wiki/Decorator_pattern Decorator]
  * [http://en.wikipedia.org/wiki/Adapter_pattern Adapter] (see also  [http://stackoverflow.com/questions/3253015/is-the-adapter-pattern-usable-in-cases-where-the-different-interface-methods-have this article on StackOverflow])
  * [http://en.wikipedia.org/wiki/Template_method_pattern Template method]
  * [http://en.wikipedia.org/wiki/Facade_pattern Facade]
==Anti-patterns==
  * [http://www.javapractices.com/topic/TopicAction.do?Id=215 constructors should not call overridable methods]
  * [http://stackoverflow.com/questions/3456177/calling-super-super-class-method calling a method in your super-super class]

==Other==
  * [http://java.dzone.com/news/spring-enabling-decoupled-swin Swing and Spring]
  * [http://en.wikipedia.org/wiki/Object_composition UML - object composition]

=Testing=
  * [http://soapui.org/ SoapUI] for testing webservices
  * [http://seleniumhq.org/ Selenium] for testing web UI's
  * [http://www.agiledata.org/essays/databaseTesting.html database testing]. See DbUnit
  * [http://www.eclemma.org code coverage] to find out which part of your code is touched by your tests
  * [http://mockito.googlecode.com/svn/branches/1.5/javadoc/org/mockito/Mockito.html Mockito] for easily setting up mock dependencies in unit tests

=Frameworks=
  * [http://download.oracle.com/docs/cd/E17476_01/javase/1.5.0/docs/api/javax/swing/JFrame.html Swing]
    * [http://stackoverflow.com/questions/1140303/java-swing-range-slider-u-i MultiSlider]
  * [http://javablog.co.uk/2008/01/23/persistence-options-in-java-part-3-jpa JPA & Hibernate]
  * [http://docs.jboss.org/hibernate/stable/annotations/reference/en/html/entity.html Hibernate Entity mapping]
  * [http://www.javalobby.org/articles/hibernatequery102/ hibernate criteria API]